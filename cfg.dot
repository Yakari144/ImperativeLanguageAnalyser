digraph G {
"Entry_maior" -> "1:  int maior  ;  "
"1:  int maior  ;  " -> "2: se num1  >= num2   "
"2: se num1  >= num2   " -> "3: ENTAO"
"2: se num1  >= num2   " [shape=diamond]
"1:  int maior  ;  " -> "4: maior =  num1     ;  "
"2: se num1  >= num2   " -> "5: SENAO"
"2: se num1  >= num2   " -> "6: SENAO "
"6: SENAO " -> "7: maior =  num2     ;  "
"7: maior =  num2     ;  " -> "8: SAIR_SE"
"5: SENAO" -> "8: SAIR_SE"
"8: SAIR_SE" -> "10: devolve maior  ; "
"10: devolve maior  ; " -> "Exit_maior"
"Entry_divisivel" -> "11: enquanto 1  >= 1   "
"11: enquanto 1  >= 1   " [shape=diamond]
"11: enquanto 1  >= 1   " -> "11:  int e = 1 - 17    ;  "
"11:  int e = 1 - 17    ;  " -> "11: enquanto 1  >= 1   "
"11: enquanto 1  >= 1   " -> "13:  bool teste2 = maior( b   ,  a   )     ;  "
"13:  bool teste2 = maior( b   ,  a   )     ;  " -> "14: devolve teste2  ; "
"14: devolve teste2  ; " -> "Exit_divisivel"
"0:  int final2 = 3    ;  " -> "15:  int valor = 4    ;  "
"Entry_main" -> "16:  bool teste = divisivel( a   )     ;  "
"16:  bool teste = divisivel( a   )     ;  " -> Exit_main
"15:  int valor = 4    ;  " -> "17:  int final = 10    ;  "
}
