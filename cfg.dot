digraph G {
"Entry_maior" -> "1:  int maior  ;  "
"1:  int maior  ;  " -> "2: se num1  >= num2   "
"2: se num1  >= num2   " -> "3: ENTAO"
"2: se num1  >= num2   " [shape=diamond]
"1:  int maior  ;  " -> "4: a =  3     ;  "
"4: a =  3     ;  " -> "5: maior =  num1     ;  "
"2: se num1  >= num2   " -> "6: SENAO"
"2: se num1  >= num2   " -> "7: SENAO "
"7: SENAO " -> "8: a =  2     ;  "
"8: a =  2     ;  " -> "9: maior =  num2     ;  "
"9: maior =  num2     ;  " -> "10: SAIR_SE"
"6: SENAO" -> "10: SAIR_SE"
"10: SAIR_SE" -> "12: devolve maior  ; "
"12: devolve maior  ; " -> "Exit_maior"
"Entry_divisivel" -> "13: enquanto 1  >= 1   "
"13: enquanto 1  >= 1   " [shape=diamond]
"13: enquanto 1  >= 1   " -> "13:  int e = 1 - 17    ;  "
"13:  int e = 1 - 17    ;  " -> "13: enquanto 1  >= 1   "
"13: enquanto 1  >= 1   " -> "15: devolve eg  ; "
"15: devolve eg  ; " -> "Exit_divisivel"
"Entry_complexo" -> "16: enquanto !a  "
"16: enquanto !a  " [shape=diamond]
"16: enquanto !a  " -> "16:  int e = 2    ;  "
"16:  int e = 2    ;  " -> "16: enquanto !a  "
"16: enquanto !a  " -> Exit_complexo
"0:  int final2 = 3    ;  " -> "18:  int valor = 4    ;  "
"Entry_main" -> "19:  bool teste = 4    ;  "
"19:  bool teste = 4    ;  " -> Exit_main
"18:  int valor = 4    ;  " -> "20: divisivel( 4   )   ;  "
"20: divisivel( 4   )   ;  " -> "21: main( 3   ,  4   )   ;  "
"21: main( 3   ,  4   )   ;  " -> "22:  int final = 10    ;  "
}
